{"version":3,"file":"polyfill.js","mappings":"YAckB,IACNA,EACAC,EASAC,EACAC,EAzBR,aAAcC,SAAWC,SAASC,UAAUC,UAC5CC,QAAQC,KAAK,qBACbJ,SAASC,UAAUC,QAAU,SAAUG,EAAUC,GAC7CA,EAAUA,GAAWP,OACrB,IAAK,IAAIQ,EAAI,EAAGA,EAAIC,KAAKC,OAAQF,IAC7BF,EAASK,KAAKJ,EAASE,KAAKD,GAAIA,EAAGC,KAE1C,GAKAG,MAAMC,OACPD,MAAMC,MACEjB,EAAQkB,OAAOZ,UAAUa,SACzBlB,EAAa,SAAUmB,GACvB,MAAqB,mBAAPA,GAAwC,sBAAnBpB,EAAMe,KAAKK,EACjD,EAOGlB,EAAiBmB,KAAKC,IAAI,EAAG,IAAM,EACnCnB,EAAW,SAAUoB,GACrB,IAAIC,EARQ,SAAUD,GACtB,IAAIE,EAASC,OAAOH,GACpB,OAAII,MAAMF,GAAkB,EACb,IAAXA,GAAiBG,SAASH,IACtBA,EAAS,EAAI,GAAK,GAAKJ,KAAKQ,MAAMR,KAAKS,IAAIL,IADHA,CAEnD,CAGaM,CAAUR,GACpB,OAAOF,KAAKW,IAAIX,KAAKY,IAAIT,EAAK,GAAItB,EACrC,EAGM,SAAcgC,GAEjB,IAAIC,EAAItB,KAGJuB,EAAQlB,OAAOgB,GAGnB,GAAiB,MAAbA,EACA,MAAM,IAAIG,UAAU,oEAIxB,IACIC,EADAC,EAAQC,UAAU1B,OAAS,EAAI0B,UAAU,QAAK,EAElD,QAAqB,IAAVD,EAAuB,CAG9B,IAAKtC,EAAWsC,GACZ,MAAM,IAAIF,UAAU,qEAIpBG,UAAU1B,OAAS,IACnBwB,EAAIE,UAAU,GAErB,CAgBD,IAZA,IAWIC,EAXAjB,EAAMrB,EAASiC,EAAMtB,QAMrB4B,EAAIzC,EAAWkC,GAAKjB,OAAO,IAAIiB,EAAEX,IAAQ,IAAIR,MAAMQ,GAGnDmB,EAAI,EAGDA,EAAInB,GACPiB,EAASL,EAAMO,GAEXD,EAAEC,GADFJ,OACoB,IAAND,EAAoBC,EAAME,EAAQE,GAAKJ,EAAMxB,KAAKuB,EAAGG,EAAQE,GAEpEF,EAEXE,GAAK,EAKT,OAFAD,EAAE5B,OAASU,EAEJkB,CACV,G","sources":["webpack://neptune-component/./polyfill.js"],"sourcesContent":["// forEach\r\nif ('NodeList' in window && !NodeList.prototype.forEach) {\r\n    console.info('polyfill for IE11');\r\n    NodeList.prototype.forEach = function (callback, thisArg) {\r\n        thisArg = thisArg || window;\r\n        for (var i = 0; i < this.length; i++) {\r\n            callback.call(thisArg, this[i], i, this);\r\n        }\r\n    };\r\n}\r\n\r\n// Array.from\r\n// Production steps of ECMA-262, Edition 6, 22.1.2.1\r\nif (!Array.from) {\r\n    Array.from = (function () {\r\n        var toStr = Object.prototype.toString;\r\n        var isCallable = function (fn) {\r\n            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\r\n        };\r\n        var toInteger = function (value) {\r\n            var number = Number(value);\r\n            if (isNaN(number)) { return 0; }\r\n            if (number === 0 || !isFinite(number)) { return number; }\r\n            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\r\n        };\r\n        var maxSafeInteger = Math.pow(2, 53) - 1;\r\n        var toLength = function (value) {\r\n            var len = toInteger(value);\r\n            return Math.min(Math.max(len, 0), maxSafeInteger);\r\n        };\r\n\r\n        // The length property of the from method is 1.\r\n        return function from(arrayLike/*, mapFn, thisArg */) {\r\n            // 1. Let C be the this value.\r\n            var C = this;\r\n\r\n            // 2. Let items be ToObject(arrayLike).\r\n            var items = Object(arrayLike);\r\n\r\n            // 3. ReturnIfAbrupt(items).\r\n            if (arrayLike == null) {\r\n                throw new TypeError('Array.from requires an array-like object - not null or undefined');\r\n            }\r\n\r\n            // 4. If mapfn is undefined, then let mapping be false.\r\n            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\r\n            var T;\r\n            if (typeof mapFn !== 'undefined') {\r\n                // 5. else\r\n                // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\r\n                if (!isCallable(mapFn)) {\r\n                    throw new TypeError('Array.from: when provided, the second argument must be a function');\r\n                }\r\n\r\n                // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n                if (arguments.length > 2) {\r\n                    T = arguments[2];\r\n                }\r\n            }\r\n\r\n            // 10. Let lenValue be Get(items, \"length\").\r\n            // 11. Let len be ToLength(lenValue).\r\n            var len = toLength(items.length);\r\n\r\n            // 13. If IsConstructor(C) is true, then\r\n            // 13. a. Let A be the result of calling the [[Construct]] internal method\r\n            // of C with an argument list containing the single item len.\r\n            // 14. a. Else, Let A be ArrayCreate(len).\r\n            var A = isCallable(C) ? Object(new C(len)) : new Array(len);\r\n\r\n            // 16. Let k be 0.\r\n            var k = 0;\r\n            // 17. Repeat, while k < lenâ€¦ (also steps a - h)\r\n            var kValue;\r\n            while (k < len) {\r\n                kValue = items[k];\r\n                if (mapFn) {\r\n                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\r\n                } else {\r\n                    A[k] = kValue;\r\n                }\r\n                k += 1;\r\n            }\r\n            // 18. Let putStatus be Put(A, \"length\", len, true).\r\n            A.length = len;\r\n            // 20. Return A.\r\n            return A;\r\n        };\r\n    }());\r\n}\r\n"],"names":["toStr","isCallable","maxSafeInteger","toLength","window","NodeList","prototype","forEach","console","info","callback","thisArg","i","this","length","call","Array","from","Object","toString","fn","Math","pow","value","len","number","Number","isNaN","isFinite","floor","abs","toInteger","min","max","arrayLike","C","items","TypeError","T","mapFn","arguments","kValue","A","k"],"sourceRoot":""}